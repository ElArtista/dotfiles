#!/bin/bash

#----------------------------------------------------------------------
# Help
#----------------------------------------------------------------------
USAGE="Usage: pkglist [OPTIONS]"
HELP="\
pkglist [OPTIONS]
Flags:
  -h,--help                     prints current help message
  -a,--all                      prints all packages in package lists
  -g,--groups                   prints package groups in lists
  -r,--repo-only                prints packages in official repositories
  -m,--foreign-only             prints foreign installed packages (AUR)
"

die() {
    echo >&2 "$*"
    exit 1
}

#----------------------------------------------------------------------
# Configuration
#----------------------------------------------------------------------
REPO_PACKAGE_FILE=$HOME/.misc/list.txt
FOREIGN_PACKAGE_FILE=$HOME/.misc/list-aur.txt

#----------------------------------------------------------------------
# Functions
#----------------------------------------------------------------------
# Extracts package list from given file
function pkglist_from_files() {
    local pkglist=$(cat $@)
    printf "%s\n" ${pkglist[@]}
}

# Gather package lists
rplist=($(pkglist_from_files $REPO_PACKAGE_FILE))
mplist=($(pkglist_from_files $FOREIGN_PACKAGE_FILE))
aplist=($(printf "%s\n" ${rplist[@]} ${mplist[@]} | sort))

# Prints repository packages from lists
function show_repo_packages() {
    if [ ! ${#rplist} -eq 0 ]; then
        echo "${rplist[@]}"
    fi
}

# Prints foreign packages from lists
function show_foreign_packages() {
    if [ ! ${#mplist} -eq 0 ]; then
        echo "${mplist[@]}"
    fi
}

# Prints all packages from lists
function show_all_packages() {
    if [ ! ${#aplist} -eq 0 ]; then
        echo "${aplist[@]}"
    fi
}

# Prints all package groups from lists
function show_package_groups() {
    if [ ! ${#aplist} -eq 0 ]; then
        # Find packages that are not groups with 1 query
        local not_groups=($((pacman -Qqg ${aplist[@]} >/dev/null 2> >(grep -Po "(?<=').*(?=')" >&2)) 2>&1 | sort))
        # Compare them to the original list and keep the ones missing
        comm -23 \
            <(printf "%s\n" ${aplist[@]}) \
            <(printf "%s\n" ${not_groups[@]})
        # Legacy but slower method:
        # printf "%s\n" ${not_groups[@]}
        # grplist=()
        # for p in ${aplist[@]}; do
        #     # Check if package is group
        #     grppkgs=$(pacman -Qqg $p 2>/dev/null)
        #     if [ $? -ne 1 ] ; then
        #         grplist+=($p)
        #     fi
        # done
        # echo "${grplist[@]}"
    fi
}

#----------------------------------------------------------------------
# Command line interface
#----------------------------------------------------------------------
usage() {
    die "$USAGE"
}

help() {
    echo "$HELP"
}

case "$#" in
    0)
        usage ;;
    *)
        cmd="$1"
        shift
        case "$cmd" in
            -h|--help)
                help ;;
            -a|--all)
                show_all_packages ;;
            -g|--groups)
                show_package_groups ;;
            -r|--repo-only)
                show_repo_packages ;;
            -m|--foreign-only)
                show_foreign_packages ;;
            *)
                usage ;;
        esac
esac
