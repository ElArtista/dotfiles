#!/bin/bash

#----------------------------------------------------------------------
# Configuration
#----------------------------------------------------------------------
PACKAGE_FILES=($HOME/.misc/list.txt $HOME/.misc/list-aur.txt)

#----------------------------------------------------------------------
# Help
#----------------------------------------------------------------------
USAGE="Usage: pkglist [OPTIONS]"
HELP="\
pkglist [OPTIONS]
Flags:
  -h,--help                     prints current help message
  -a,--all                      prints all packages in package lists
  -r,--repo-only                prints packages in official repositories
  -m,--foreign-only             prints foreign installed packages (AUR)
  -d,--duplicates               prints duplicate packages
"

function die() { echo >&2 "$*"; exit 1; }
function usage() { die "$USAGE"; }
function help() { echo "$HELP"; }

#----------------------------------------------------------------------
# Arguments
#----------------------------------------------------------------------
INCLUDE_REPO_PKGS=0
INCLUDE_FOREIGN_PKGS=0
SHOW_DUPLICATES=0

case "$#" in
    0)
        usage ;;
    *)
        while [ $# -gt 0 ]; do
            case "$1" in
                -h|--help)
                    help
                    exit 0
                    ;;
                -a|--all)
                    INCLUDE_REPO_PKGS=1
                    INCLUDE_FOREIGN_PKGS=1
                    ;;
                -r|--repo-only)
                    INCLUDE_REPO_PKGS=1
                    ;;
                -m|--foreign-only)
                    INCLUDE_FOREIGN_PKGS=1
                    ;;
                -d|--duplicates)
                    SHOW_DUPLICATES=1
                    ;;
                *)
                    usage ;;
            esac
            shift
        done
esac

# Default to showing packages from all sources
if [ $INCLUDE_REPO_PKGS -eq 0 ] && [ $INCLUDE_FOREIGN_PKGS -eq 0 ]; then
    INCLUDE_REPO_PKGS=1
    INCLUDE_FOREIGN_PKGS=1
fi

#----------------------------------------------------------------------
# Functions
#----------------------------------------------------------------------
# Extracts package list from given file
function pkglist_from_files() {
    local pkglist=$(cat $@)
    printf "%s\n" ${pkglist[@]}
}

# Prints all non group packages from lists
function package_nongroups() {
    local lst=$@
    if [ ! ${#lst} -eq 0 ]; then
        # Find packages that are not groups with 1 query
        local not_groups=($((pacman -Qqg ${lst[@]} >/dev/null 2> >(grep -Po "(?<=').*(?=')" >&2)) 2>&1 | sort))
        echo ${not_groups[@]}
    fi
}

# Prints all package groups from lists
function package_groups() {
    local lst=$@
    if [ ! ${#lst} -eq 0 ]; then
        # Compare them to the original list and keep the ones missing
        local not_groups=$(package_nongroups ${lst[@]})
        comm -23 \
            <(printf "%s\n" ${lst[@]}) \
            <(printf "%s\n" ${not_groups[@]})
    fi
}

# Expands groups in given package list
function expand_packages() {
    local lst=$@
    printf "%s\n" $(package_nongroups ${lst[@]}) $(pacman -Qqg ${lst[@]} 2>/dev/null) | sort
}


# Gather package lists
fplist=($(pkglist_from_files ${PACKAGE_FILES[@]}))
eplist=($(expand_packages ${fplist[@]}))
dplist=($(printf "%s\n" ${eplist[@]} | sort | uniq -d))
aplist=($(printf "%s\n" ${eplist[@]} | sort -u))
rplist=($(comm -12 <(printf "%s\n" ${aplist[@]}) <(pacman -Ssq | sort) | sort))
mplist=($(comm -23 <(printf "%s\n" ${aplist[@]}) <(printf "%s\n" ${rplist[@]}) | sort))

#----------------------------------------------------------------------
# Entrypoint
#----------------------------------------------------------------------
# Construct list
plist=()
if [ $INCLUDE_REPO_PKGS -eq 1 ]; then
    plist+=(${rplist[@]})
fi
if [ $INCLUDE_FOREIGN_PKGS -eq 1 ]; then
    plist+=(${mplist[@]})
fi
plist=($(printf "%s\n" ${plist[@]} | sort))

# Show duplicates
if [ $SHOW_DUPLICATES -eq 1 ]; then
    echo ${dplist[@]}
    exit
fi

# Show packages
if [ ! ${#plist} -eq 0 ]; then
    echo "${plist[@]}"
fi
