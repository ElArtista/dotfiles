#!/bin/bash

#----------------------------------------------------------------------
# Configuration
#----------------------------------------------------------------------
PACKAGE_FILES=($HOME/.misc/list.txt $HOME/.misc/list-aur.txt)

#----------------------------------------------------------------------
# Help
#----------------------------------------------------------------------
USAGE="Usage: pkglist [OPTION]... [PKGFILE]..."
HELP="\
pkglist [OPTION]... [PKGFILE]...
Flags:
  -h,--help                     prints current help message
  -a,--all                      prints all packages in package lists
  -n,--native-only              prints packages in official repositories
  -m,--foreign-only             prints foreign installed packages (AUR)
  -r,--raw                      prints unexpanded entries in package lists
  -d,--duplicates               prints duplicate packages
"

function die() { echo >&2 "$*"; exit 1; }
function usage() { die "$USAGE"; }
function help() { echo "$HELP"; }

#----------------------------------------------------------------------
# Arguments
#----------------------------------------------------------------------
INCLUDE_NATIVE_PKGS=0
INCLUDE_FOREIGN_PKGS=0
SHOW_DUPLICATES=0
SHOW_RAW=0

case "$#" in
    0)
        usage ;;
    *)
        while [ $# -gt 0 ]; do
            case "$1" in
                -h|--help)
                    help
                    exit 0
                    ;;
                -a|--all)
                    INCLUDE_NATIVE_PKGS=1
                    INCLUDE_FOREIGN_PKGS=1
                    ;;
                -n|--native-only)
                    INCLUDE_NATIVE_PKGS=1
                    ;;
                -m|--foreign-only)
                    INCLUDE_FOREIGN_PKGS=1
                    ;;
                -r|--raw)
                    SHOW_RAW=1
                    ;;
                -d|--duplicates)
                    SHOW_DUPLICATES=1
                    ;;
                *)
                    break ;;
            esac
            shift
        done
esac

# Check provided package list files
if [ $# -gt 0 ]; then
    PACKAGE_FILES=($@)
    for p in ${PACKAGE_FILES[@]}; do
        if [ ! -f $p ]; then
            die "Package file $p does not exist."
        fi
    done
fi

# Default to showing packages from all sources
if [ $INCLUDE_NATIVE_PKGS -eq 0 ] && [ $INCLUDE_FOREIGN_PKGS -eq 0 ]; then
    INCLUDE_NATIVE_PKGS=1
    INCLUDE_FOREIGN_PKGS=1
fi

#----------------------------------------------------------------------
# Functions
#----------------------------------------------------------------------
# Extracts package list from given file
function pkglist_from_files() {
    local pkglist=$(cat $@ | sed -e 's/#.*//g;/^\s*$/d')
    printf "%s\n" ${pkglist[@]}
}

# Prints all non group packages from lists
function package_nongroups() {
    local lst=$@
    if [ ! ${#lst} -eq 0 ]; then
        # Find packages that are not groups with 1 query
        local not_groups=($((pacman -Qqg ${lst[@]} >/dev/null 2> >(grep -Po "(?<=').*(?=')" >&2)) 2>&1 | sort))
        echo ${not_groups[@]}
    fi
}

# Prints all package groups from lists
function package_groups() {
    local lst=$@
    if [ ! ${#lst} -eq 0 ]; then
        # Compare them to the original list and keep the ones missing
        local not_groups=$(package_nongroups ${lst[@]})
        comm -23 \
            <(printf "%s\n" ${lst[@]}) \
            <(printf "%s\n" ${not_groups[@]})
    fi
}

# Expands groups in given package list
function expand_packages() {
    local lst=$@
    printf "%s\n" $(package_nongroups ${lst[@]}) $(pacman -Qqg ${lst[@]} 2>/dev/null) | sort
}


# Gather package lists
fplist=($(pkglist_from_files ${PACKAGE_FILES[@]}))
eplist=($(expand_packages ${fplist[@]}))
dplist=($(printf "%s\n" ${eplist[@]} | sort | uniq -d))
aplist=($(printf "%s\n" ${eplist[@]} | sort -u))
nplist=($(comm -12 <(printf "%s\n" ${aplist[@]}) <(pacman -Ssq | sort) | sort))
mplist=($(comm -23 <(printf "%s\n" ${aplist[@]}) <(printf "%s\n" ${nplist[@]}) | sort))

#----------------------------------------------------------------------
# Entrypoint
#----------------------------------------------------------------------
# Construct list
plist=()
if [ $INCLUDE_NATIVE_PKGS -eq 1 ]; then
    plist+=(${nplist[@]})
fi
if [ $INCLUDE_FOREIGN_PKGS -eq 1 ]; then
    plist+=(${mplist[@]})
fi
plist=($(printf "%s\n" ${plist[@]} | sort))

# Show duplicates
if [ $SHOW_DUPLICATES -eq 1 ]; then
    echo ${dplist[@]}
    exit
fi

# Show raw
if [ $SHOW_RAW -eq 1 ]; then
    splist=($(printf "%s\n" ${fplist[@]} | sort))
    echo ${splist[@]}
    exit
fi

# Show packages
if [ ! ${#plist} -eq 0 ]; then
    echo "${plist[@]}"
fi
