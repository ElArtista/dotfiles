#!/bin/bash

#----------------------------------------------------------------------
# Help
#----------------------------------------------------------------------
USAGE="Usage: pkgdiff [OPTIONS]"
HELP="\
pkgdiff [OPTIONS]
Flags:
  -i,--not-installed            prints packages not installed from the package list
  -p,--missing-packages         prints packages installed in system, but missing in package list
  -r,--missing-packages-aur     prints aur packages installed in system, but missing in aur package list
  -d,--duplicate-packages       prints duplicate packages in package lists, also referenced by groups
  -l,--missing-packages-list    same as -p combined with -r with package descriptions
"

die() {
    echo >&2 "$*"
    exit 1
}

#----------------------------------------------------------------------
# Configuration
#----------------------------------------------------------------------
PACKAGE_FILES=($HOME/.misc/list.txt $HOME/.misc/list-aur.txt)

#----------------------------------------------------------------------
# Functions
#----------------------------------------------------------------------
# Create package list from text files
inplist=$(cat ${PACKAGE_FILES[@]})
pkglist=(); grplist=()
for p in $inplist; do
    # Check if package is group
    grppkgs=$(pacman -Qqg $p 2>/dev/null)
    if [ $? -eq 1 ] ; then
        pkglist+=($p)
    else
        grplist+=($p)
        # Append each group's pkg to list
        for gp in ${grppkgs[@]}; do
            pkglist+=($gp)
        done
    fi
done
pkglist=($(printf "%s\n" ${pkglist[@]} | sort))

# Gather installed packages
installed_list=($(yay -Qqe | sort))

# Retrieve foreign packages (not installed by pacman)
foreign_packages=($(pacman -Qqme | sort))

# Check if bash array contains element
function contains() {
    local e match="$1"
    shift
    for e; do [[ "$e" == "$match" ]] && return 0; done
    return 1
}

# Join bash array by multichar separator
function join_by { perl -e '$s = shift @ARGV; print join($s, @ARGV);' "$@"; }

# Retrieve a package's group (first in list)
function pkggrp { pacman -Qi $1 | sed -nr 's/Groups\s+:\s+(\S*).*/\1/p'; }

# Check duplicate package references in package lists
# (possibly some packages also referenced by groups)
function duplicate_packages() {
    # Get duplicate packages on list
    pkgs=($(printf "%s\n" "${pkglist[@]}" | sort | uniq -cd | sed -nr 's/\s+[0-9]+\s+//p'))
    for p in ${pkgs[@]}; do
        if ! contains $(pkggrp $p) ${grplist[@]}; then
            # Show only packages not duplicate by group references
            echo $p
        fi
    done
}

# Not installed packages from package lists
function not_installed_packages() {
    for p in ${pkglist[@]}; do
        if ! pacman -Qi $p &> /dev/null; then
            echo $p
        fi
    done
}

# Missing packages from lists that are currently installed in system
function missing_packages() {
    comm -13 \
        <(printf "%s\n" ${pkglist[@]}) \
        <(printf "%s\n" ${installed_list[@]})
}

missing_pkgs=($(missing_packages))
missing_official_pkgs=(); missing_aur_pkgs=();
for p in ${missing_pkgs[@]}; do
    if ! contains $p ${foreign_packages[@]}; then
        official_pkgs+=($p)
    else
        aur_pkgs+=($p)
    fi
done

function show_duplicate_packages() {
    duplicate_pkgs=()
    for p in $(duplicate_packages); do
        grp=$(pkggrp $p)
        duplicate_pkgs+=("$p ($grp)")
    done
    if [ ! ${#duplicate_pkgs[@]} -eq 0 ]; then
        echo $(join_by ", " "${duplicate_pkgs[@]}")
    fi
}

function show_not_installed_packages() {
    not_installed_pkgs=($(not_installed_packages))
    if [ ! ${#not_installed_pkgs} -eq 0 ]; then
        echo $(join_by ", " "${not_installed_pkgs[@]}")
    fi
}

function show_missing_packages() {
    if [ ! ${#official_pkgs} -eq 0 ]; then
        echo $(join_by ", " "${official_pkgs[@]}")
    fi
}

function show_missing_aur_packages() {
    if [ ! ${#aur_pkgs} -eq 0 ]; then
        echo $(join_by ", " "${aur_pkgs[@]}")
    fi
}

function show_missing_packages_detail() {
    for f in `echo ${missing_pkgs[@]} | sed 's/,//g'`; do
        echo $f - $(pacman -Qi $f | sed -nr 's/Description\s+:\s+(.*).*/\1/p');
    done
}

#----------------------------------------------------------------------
# Command line interface
#----------------------------------------------------------------------
usage() {
    die "$USAGE"
}

help() {
    echo "$HELP"
}

case "$#" in
    0)
        usage ;;
    *)
        cmd="$1"
        shift
        case "$cmd" in
            -h|--help)
                help ;;
            -i|--not-installed)
                show_not_installed_packages ;;
            -p|--missing-packages)
                show_missing_packages ;;
            -r|--missing-packages-aur)
                show_missing_aur_packages ;;
            -d|--duplicate-packages)
                show_duplicate_packages ;;
            -l|--missing-packages-list)
                show_missing_packages_detail ;;
            *)
                usage ;;
        esac
esac
