#!/usr/bin/bash

#================================================================
#=- Configuration
#================================================================
# Window manager integration
PANEL_WM_NAME=lemonbar_panel

# Hardware
POWERSUPPLY="/sys/class/power_supply/AC0"

#================================================================
#=- Customization
#================================================================
# Dimensions
PANEL_HEIGHT=25

# Fonts
PANEL_FONT="Misc Termsynu:size=9"
ICON_FONT="Siji:size=8"

#
# Colors
#
xcolor(){
    local qname=$1
    xrdb -query | sed -nr "s/\*\.?$qname\s*:\s*(.*)\s*/\L\1/p" | head -n 1
}

# Main colors
COLOR_FOREGROUND=`xcolor color4`
COLOR_BACKGROUND=`xcolor background`
COLOR_ALERT=`xcolor color1`
COLOR_FOREGROUND_ALT=`xcolor color7`
COLOR_BACKGROUND_ALT=$COLOR_FOREGROUND

# Occupied
COLOR_FOCUSED_OCCUPIED_FG=$COLOR_FOREGROUND_ALT
COLOR_FOCUSED_OCCUPIED_BG=$COLOR_BACKGROUND_ALT
COLOR_OCCUPIED_FG=$COLOR_FOREGROUND_ALT
COLOR_OCCUPIED_BG=$COLOR_BACKGROUND

# Free
COLOR_FOCUSED_FREE_FG=$COLOR_BACKGROUND
COLOR_FOCUSED_FREE_BG=$COLOR_FOCUSED_OCCUPIED_BG
COLOR_FREE_FG=$COLOR_FOREGROUND
COLOR_FREE_BG=$COLOR_OCCUPIED_BG

# Urgent
COLOR_FOCUSED_URGENT_FG=$COLOR_ALERT
COLOR_FOCUSED_URGENT_BG=$COLOR_BACKGROUND_ALT
COLOR_URGENT_FG=$COLOR_BACKGROUND
COLOR_URGENT_BG=$COLOR_ALERT

# Wifi signal colors
COLOR_SIGNAL_LOW=$COLOR_FOREGROUND
COLOR_SIGNAL_MEDIUM=$COLOR_FOREGROUND_ALT
COLOR_SIGNAL_HIGH=$COLOR_FOREGROUND_ALT

#
# Icons
#
ICON_BATT_FULL='\ue23a'
ICON_BATT_HIGH='\ue253'
ICON_BATT_MED='\ue251'
ICON_BATT_LOW='\ue24e'
ICON_BATT_EMPTY='\ue24c'
ICON_POWER_PLUG='\ue239'
ICON_PREV='\ue096'
ICON_PLAY='\ue09a'
ICON_NEXT='\ue09c'
ICON_VOL_UP='\ue203'
ICON_VOL_DOWN='\ue204'
ICON_VOL_OFF='\ue202'
ICON_MESSAGES='\ue1a7'
ICON_WIFI='\ue1af'
ICON_CALENDAR='\ue226'
ICON_TIME='\ue015'
ICON_CPU='\ue082'
ICON_MEMORY='\ue0c4'
ICON_TEMP='\ue01b'

#================================================================
#=- Setup
#================================================================
# Used to log into system logs
logmsg(){
    local msg=$1
    echo $msg | systemd-cat -t panel
}

# Check if panel is already running
if xdo id -a "$PANEL_WM_NAME" > /dev/null; then
    printf "%s\n" "The panel is already running." >&2
    logmsg "Panel already running"
    exit 1
fi

# Kill child processes and reset global settings
cleanup(){
    # Reset bspwm top_padding
    bspc config top_padding 0
    # Kill child processes
    kill $(jobs -p)
}

# Self reload through signal
reset(){
    trap - USR1
    logmsg "Resetting panel...: $0"
    cleanup
    exec $0
}
trap reset USR1

# Exit gracefully if terminated
deinit(){
    trap - TERM
    cleanup
}
trap deinit TERM

#================================================================
#=- Info collectors
#================================================================
# Clock
clock(){
    echo -e "$ICON_TIME $(date +"%H:%M")"
}

# Date
cal(){
    echo -e "$ICON_CALENDAR $(date +'%a,%b %d')"
}

# Battery
battery(){
    if [ -d $POWERSUPPLY ]; then
        local icon=""
        local level=$(acpi -b | awk '{gsub(/[%,]/,""); print $4}')
        local remain=$(acpi -b | awk '{print substr($5,0,5)}')
        if [[ $(cat $POWERSUPPLY/online) != 1 ]]; then
            if [[ $level -ge 80 ]]; then
                icon=$ICON_BATT_FULL
            elif [[ $level -ge 60 && $level -lt 80 ]]; then
                icon=$ICON_BATT_HIGH
            elif [[ $level -ge 40 && $level -lt 60 ]]; then
                icon=$ICON_BATT_MED
            elif [[ $level -ge 20 && $level -lt 40 ]]; then
                icon=$ICON_BATT_LOW
            elif [[ $level -lt 20 ]]; then
                icon=$ICON_BATT_EMPTY
            fi
        else
            icon=$ICON_POWER_PLUG
        fi
        if [ ! -z $remain ]; then
            echo -e $icon $level%/$remain
        else
            echo -e $icon $level%
        fi
    fi
}

# Volume
volume(){
    local value=$(pamixer --get-volume)
    local state=$(pamixer --get-mute)
    local icon=""
    if [[ $state == "false" ]]; then
        if [[ $value -ge 70 ]]; then
            icon=$ICON_VOL_UP
        elif [[ $value -gt 0 && $value -lt 70 ]]; then
            icon=$ICON_VOL_DOWN
        elif [[ $value -eq 0 ]]; then
            icon=$ICON_VOL_OFF
        fi
        echo -e $icon $value%
    else
        icon=$ICON_VOL_OFF
        echo -e $icon
    fi
}

# Weechat (use hl2file weechat script)
weechat(){
    local msgfile=$HOME/.weechat/highlights.txt
    if [ -f "$msgfile" ]; then
        local weechat_icon=""
        local unreadmessages=$(wc -l < "$msgfile")
        echo -e $ICON_MESSAGES $unreadmessages
    fi
}

# Wifi
wifi(){
    local nic=$(iw dev | grep -B 5 ssid | awk '/Interface/{print $2}' | head -n 1)
    if [ ! -z $nic ]; then
        local ssid=$(iw $nic link | awk '/SSID/{print $2}')
        local signal=$(iw dev "$nic" link | awk '/signal/{print $2}')

        local color=""
        if [[ $signal -ge -67 ]]; then
            color=$COLOR_SIGNAL_HIGH
        elif [[ $signal -ge -70 && $signal -lt -67 ]]; then
            color=$COLOR_SIGNAL_MEDIUM
        elif [[ $signal -ge -80 && $signal -lt -70 ]]; then
            color=$COLOR_SIGNAL_LOW
        fi

        echo -e "%{F$color}$ICON_WIFI%{F-} $ssid"
    fi
}

# CPU usage
cpu(){
    #local cpu=$(awk '/cpu\s/{printf "%.0f\n", (($2+$4)/($2+$4+$5))*100}' /proc/stat)
    #local cpu=$(mpstat --dec=0 1 1 | tail -n +3 | awk '/CPU/{getline; print 100 - $13}')
    echo -e $ICON_CPU $1%
}

# Memory usage
memory(){
    local mem=$(free -m | awk '/Mem/{print $3+$5}')
    echo -e $ICON_MEMORY ${mem}MB
}

# Temperature
temp(){
    local temp=$(sensors | awk '/Package id/{print strtonum($4)}')
    echo -e $ICON_TEMP ${temp}C
}

# Music controls
music(){
    pgrep mpd >/dev/null # To populate last error
    if [[ $? -eq 0 ]]; then
        local song_name=$(mpc current)
        if [[ -n $song_name ]]; then
            local sidx=$(($(date +%s) % ${#song_name}))
            local pp
            if mpc status | grep -q 'paused'; then
                # Music is paused
                pp="%{A:mpc play:}$ICON_PLAY%{A}"
            else
                # Music is playing
                pp="%{A:mpc pause:}${song_name:$sidx}%{A}"
            fi
            printf "%b %-10b %b\n" "|%{A:mpc next:}$ICON_PREV%{A}" "$pp" "%{A:mpc prev:}$ICON_NEXT%{A}|"
        fi
    fi
}

# Title
title(){
    local title=$(echo "$@" | fold -w 60 -s | awk 'BEGIN{ORS=""}; NR==1{print $0}; NR==2{print "..."}')
    local total=$(bspc query -N -n .leaf.local | wc -l)
    local curnt=$(bspc query -N -n .leaf.local | awk "/$(bspc query -N -n)/{print FNR}")
    if [ $total -gt 1 ] && [ ! -z $curnt ]; then
        printf "%s [%s/%s]\n" "$title" "$curnt" "$total"
    else
        printf "%s\n" "$title"
    fi
}

# Window manager
workspaces(){
    # Bspwm internal state
    IFS=':'
    local line=$1
    local pad=" "
    local cur_mon=0
    local cur_dsk=0
    local wm_infos=""
    set -- ${line}
    while [ $# -gt 0 ]; do
        item=$1
        name=${item#?}
        case $item in
            M*)
                # Active monitor
                ((cur_mon++))
                cur_dsk=0
                if [ $cur_mon -ge 2 ]; then
                    wm_infos="${wm_infos}%{S$cur_mon}"
                fi
                ;;
            m*)
                # Inactive monitor
                ((cur_mon++))
                cur_dsk=0
                if [ $cur_mon -ge 2 ]; then
                    wm_infos="${wm_infos}%{S$cur_mon}"
                fi
                ;;
            O*)
                # Focused occupied desktop
                ((cur_dsk++))
                wm_infos="${wm_infos}%{F$COLOR_FOCUSED_OCCUPIED_FG}%{B$COLOR_FOCUSED_OCCUPIED_BG}%{U$COLOR_FOREGROUND}%{+u}$pad${name}$pad%{-u}%{B-}%{F-}"
                ;;
            F*)
                # Focused free desktop
                ((cur_dsk++))
                wm_infos="${wm_infos}%{F$COLOR_FOCUSED_FREE_FG}%{B$COLOR_FOCUSED_FREE_BG}%{U$COLOR_FOREGROUND}%{+u}$pad${name}$pad%{-u}%{B-}%{F-}"
                ;;
            U*)
                # Focused urgent desktop
                ((cur_dsk++))
                wm_infos="${wm_infos}%{F$COLOR_FOCUSED_URGENT_FG}%{B$COLOR_FOCUSED_URGENT_BG}%{U$COLOR_FOREGROUND}%{+u}$pad${name}$pad%{-u}%{B-}%{F-}"
                ;;
            o*)
                # Occupied desktop
                ((cur_dsk++))
                local click_action="bspc desktop -f ^${cur_mon}\\:^${cur_dsk}"
                wm_infos="${wm_infos}%{F$COLOR_OCCUPIED_FG}%{B$COLOR_OCCUPIED_BG}%{A:${click_action}:}$pad${name}$pad%{A}%{B-}%{F-}"
                ;;
            f*)
                # Free desktop
                ((cur_dsk++))
                local click_action="bspc desktop -f ^${cur_mon}\\:^${cur_dsk}"
                wm_infos="${wm_infos}%{F$COLOR_FREE_FG}%{B$COLOR_FREE_BG}%{A:${click_action}:}$pad${name}$pad%{A}%{B-}%{F-}"
                ;;
            u*)
                # Urgent desktop
                ((cur_dsk++))
                local click_action="bspc desktop -f ^${cur_mon}\\:^${cur_dsk}"
                wm_infos="${wm_infos}%{F$COLOR_URGENT_FG}%{B$COLOR_URGENT_BG}%{A:${click_action}:}$pad${name}$pad%{A}%{B-}%{F-}"
                ;;
        esac
        shift
    done
    unset IFS
    echo $wm_infos
}

function join_by {
    local d="$1"; shift;
    echo -n "$1"; shift;
    for i in "$@"; do
        if [ ! -z "$i" ]; then
            echo -n "$d$i"
        fi
    done
    #printf "%s" "${@/#/$d}";
}

# Message loop
panel_bar(){
    while read -r line; do
        case $line in
            UPDATE)
                # Update polled state
                local clock=$(clock)
                local date=$(cal)
                local battery=$(battery)
                local messages=$(weechat)
                local wifi=$(wifi)
                local music=$(music)
                local memory=$(memory)
                local temp=$(temp)
                ;;
            AUDIO)
                # Audio status
                local volume=$(volume)
                ;;
            TITLE*)
                # Xtitle output
                local title=$(title "${line#?????}")
                ;;
            CPU*)
                local cpu="$(cpu ${line#???})"
                ;;
            W*)
                local wm_infos=$(workspaces ${line#?})
                ;;
        esac
        local components=("${messages}" "${wifi}" "${cpu}" "${memory}" "${temp}" "${battery}" "${volume}" "${date}" "${clock}")
        printf "%s\n" "%{Sf}%{l}${wm_infos} ${music} %{c}${title} %{Sl}%{r}$(join_by " " "${components[@]}") "
    done
}

# Calculates and spawns a tray host matching the panel color and dimensions
spawn_tray(){
    # Calculate icon size relative to panel size
    local icn_size=$(($PANEL_HEIGHT - 5))

    # Find the most optimal position for the tray
    local cp=(0 0) # Current position
    local mo=(0 0) # Max offset
    while read -r line; do
        arr=(${line/x/ })
        local co=(${arr[2]:-0} ${arr[3]:-0})                                     # Current offsets are the +offx+offy part of screen info
        local rb=($(( ${arr[0]:-0} + ${co[0]} )) $(( ${arr[1]:-0} + ${co[1]} ))) # Rightmost bottom corner is dimen size + dimen offset
        # If current offsets are bigger than the max offsets
        if (( ${co[1]} >= ${mo[1]} )) && (( ${co[0]} >= ${mo[0]} )); then
            mo=(${co[@]}) # Update max offsets
            cp=(${rb[@]}) # Update current position
        fi
    done <<< `xrandr | grep -w connected | sed 's/primary\s//' | awk -F'[ +]' '{print $3,$4,$5}'`

    # Calculate absolute position
    local w=${cp[0]}
    local h=${cp[1]}
    local x=$(( w - $icn_size ))
    local y=$(( h - $icn_size ))

    # Fire up tray
    stalonetray -bg $COLOR_BACKGROUND -t -i $icn_size --grow-gravity E --icon-gravity E --geometry 1x1+$x+$y --window-layer top --window-strut none --kludges force_icons_size &
}

# Creates panel
spawn_panel(){
    # The fifo location
    local panel_fifo="/tmp/panel-fifo"

    # Remove old panel fifo, create new one
    [ -e "$panel_fifo" ] && rm "$panel_fifo"
    mkfifo "$panel_fifo"

    # Set up bspwm to not overlap the panel
    bspc config top_padding "$PANEL_HEIGHT"

    # Get bspwms status feed
    bspc subscribe > "$panel_fifo" &

    # Window title
    xtitle -sf 'TITLE%s\n' > "$panel_fifo" &

    # Audio changes
    if systemctl --user is-active pulseaudio.socket; then
        # Launch pulseaudio subscription channel
        while read -r subscribe; do
            case "${subscribe}" in
                *sink*)
                    echo "AUDIO"
                    ;;
            esac
        done < <(echo sink && pactl subscribe) > "$panel_fifo" &
    else
        # Fallback to polling
        while true; do
            echo "AUDIO"
            sleep 1;
        done > "$panel_fifo" &
    fi

    # CPU usage
    while true; do
        echo "CPU"$(mpstat --dec=0 1 2 | tail -n +3 | awk '/CPU/{getline; print 100 - $13}')
    done > "$panel_fifo" &

    # Poll event sender
    while true; do
        echo "UPDATE"
        sleep 1;
    done > "$panel_fifo" &

    # Dump panel into panel_bar and then into lemonbar
    panel_bar < "$panel_fifo" | lemonbar -n "$PANEL_WM_NAME" -g x"$PANEL_HEIGHT" -o 1 -f "$PANEL_FONT" -o 1 -f "$ICON_FONT" -F "$COLOR_FOREGROUND" -B "$COLOR_BACKGROUND" -u 2 | bash &

    # Send panel bellow everything along with the desktop
    local wids=$(xdo id -m -a "$PANEL_WM_NAME")
    for wid in $wids; do
        xdo above -t "$(xdo id -N Bspwm -n root | sort | head -n 1)" "$wid"
    done
}

spawn_panel
sleep 1
spawn_tray

wait
