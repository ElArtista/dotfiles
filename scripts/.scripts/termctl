#!/bin/bash
#set -e

#----------------------------------------------------------------------
# Help
#----------------------------------------------------------------------
USAGE="Usage: termctl [help|list|reset|switch <colorscheme>]|query <color>|change <color>]"
HELP="\
termctl <command>
Basic commands:
  h,help                        print this help message
  l,list                        list available colorschemes
  r,reset                       reset to terminal colors to default colorscheme
  s,switch       <colorscheme>  change terminal colors to <colorscheme>
  q,query        <color>        query given terminal color for current value
  qs,querysaved  <color>        query given terminal color for persistent value
  c,change       <color>        change given terminal color's value
"

die() {
    echo >&2 "$*"
    exit 1
}

#----------------------------------------------------------------------
# OSC Command helpers
#----------------------------------------------------------------------
ESC="\033"
BEL="\007"
DSC="${ESC}P"
OSC="${ESC}]"

send_escape_sequence() {
    escape_sequence="$1"
    # Wrap escape sequence when within a TMUX session
    [ ! -z "$TMUX" ] && escape_sequence="${DSC}tmux;${ESC}${escape_sequence}${ESC}\\"
    printf "${escape_sequence}"
}

send_osc() {
    Ps=$1
    Pt=$2
    command="$OSC$Ps;$Pt$BEL"
    send_escape_sequence $command
}

change_color() {
    case $1 in
        color*)
            send_osc 4 "${1#color};$2" ;;
        foreground)
            send_osc 10 "$2" ;;
        background)
            send_osc 11 "$2" ;;
        cursor)
            send_osc 12 "$2" ;;
        mouse_foreground)
            send_osc 13 "$2" ;;
        mouse_background)
            send_osc 14 "$2" ;;
        highlight)
            send_osc 17 "$2" ;;
        border)
            send_osc 708 "$2" ;;
    esac
}

remap_uint16_to_uint8() {
    local n=0x$1
    printf "%X" $((n * 0xFF / 0xFFFF))
}

remap_uint8_to_uint16() {
    local n=0x$1
    printf "%04x" $((n * 0xFFFF / 0xFF))
}

rxvt_col_to_hex() {
    # rgba:2aff/2aff/2aff/e666
    local num=$(echo $1 | sed -r 's/rgba?://')
    local c=(${num//\// })
    local oc=""
    for cc in "${c[@]}"; do
        oc+=$(remap_uint16_to_uint8 $cc)
    done
    echo \#$oc
}

hex_col_to_rxvt() {
    # #2A2A2AE5
    local num=$(echo ${1:1})
    local out=""
    [ "${#num}" -eq "8" ] && out="rgba:" || out="rgb:"
    while [ ! -z $num ]; do
        out+=$(remap_uint8_to_uint16 ${num:0:2})
        out+="/"
        num=${num:2}
    done
    out=${out:0:${#num}-1}
    echo $out
}

xrdb_col_to_hex() {
    # [90]#2b2b2b
    local nowhitespace=${1//[[:space:]]/}
    local a=$(echo $nowhitespace | grep -o -P "(?<=\[)\d+(?=\])")
    local ha=$(printf "%x" $((a * 0xFF / 100)))
    local rgb=`echo $nowhitespace | sed -r 's/\[[[:digit:]]+\]\#//'`
    local rgba=$rgb$ha
    echo \#${rgba^^}
}

query_color() {
    # Store old tty opts
    local oldstty=$(stty -g)
    # Set tty in no echo and raw mode, with minimum zero input chars
    stty raw -echo min 0 time 0
    # Send osc query command
    change_color $1 "?"
    # xterm needs the sleep (or "time 1" in stty opts, but that is 1/10th second).
    sleep 0.00000001
    read -r answer
    # echo $answer | cat -A
    local result=${answer#*;}
    # Restore tty opts
    stty $oldstty
    # Remove escape at the end.
    local rxvt_num=`echo $result | sed 's/[^rgb:0-9a-f/]\+$//'`
    # Convert rxvt format to casual RGBA hex format
    echo $(rxvt_col_to_hex $rxvt_num)
}

query_saved_color() {
    local scol=`xrdb -query | grep -P -o "(?<=URxvt\*$1:\s).*"`
    echo $(xrdb_col_to_hex $scol)
}

change_color_temp() {
    local col=`hex_col_to_rxvt $2`
    change_color $1 $col
}

#----------------------------------------------------------------------
# Color functions
#----------------------------------------------------------------------
colors=( background foreground cursor mouse_background mouse_foreground highlight border color0 color1 color2 color3 color4 color5 color6 color7 color8 color9 color10 color11 color12 color13 color14 color15 )
color_names=( black red green yellow blue magenta cyan white brblack brred brgreen bryellow brblue brmagenta brcyan brwhite )
COLORSCHEMES=~/.Xcolors

array_contains() {
    local in_arr=($1)
    for var in ${in_arr[@]}; do
        if [[ "$var" == "$2" ]]; then
            return 0
        fi
    done
    return 1
}

unset_colors() {
    for color in ${colors[@]}; do
        unset ${!color}
    done
}

set_colors() {
    for color in ${colors[@]}; do
        [[ ${!color} ]] && change_color "$color" "${!color}"
    done
}

load_default_colorscheme_name() {
    basename $(cat .Xresources | grep -P -o "(?<=\").*(?=\")")
}

convert_xres_to_bash() {
    bvars=$(cat $1 | sed -r -e '/\s*!/d' -e '/^\s*$/d' -e 's/^\s*\*\.?//' -e 's/\s*:\s*/=/')
    echo $bvars
}

gather_urxvt_vars() {
    bvars=$(cat ~/.Xresources | grep URxvt* | sed -r -e '/^\s*!/d' -e 's/\s*URxvt\*?\.?//I' -e 's/\s*:\s*/=/')
    echo $bvars
}

load_urxvt_vars() {
    list=($(gather_urxvt_vars))
    for var in ${list[@]}; do
        avar=(${var//=/ })
        if array_contains "$(echo ${colors[@]})" ${avar[0]}; then
            eval "${avar[0]}=${avar[1]}"
        fi
    done
}

load_colorscheme() {
    [ ! -f "$1" ] && die "error: colorscheme file '$1' could not be found"
    #. "$1" # Source colorscheme file
    eval $(convert_xres_to_bash $1)
}

reset() {
    default_colorscheme_name=$(load_default_colorscheme_name)
    load_colorscheme "$default_colorscheme_name"
    load_urxvt_vars
    set_colors
}

switch() {
    load_colorscheme "$COLORSCHEMES/$1"
    load_urxvt_vars
    set_colors
}

list() {
    [ ! -d "$COLORSCHEMES" ] && die "error: colorschemes directory '$COLORSCHEMES' doesn't exist"
    cd "$COLORSCHEMES"
    for file in *; do
        echo "${file}"
    done
}

#----------------------------------------------------------------------
# Command line interface
#----------------------------------------------------------------------
usage() {
    die "$USAGE"
}

help() {
    echo "$HELP"
}

case "$#" in
    0)
        usage ;;
    *)
        cmd="$1"
        shift
        case "$cmd" in
            h|help)
                help ;;
            l|list)
                list ;;
            r|reset)
                reset ;;
            s|switch)
                [ $# -ne 1 ] && usage
                switch "$1" ;;
            q|query)
                [ $# -ne 1 ] && usage
                query_color "$1" ;;
            qs|querysaved)
                [ $# -ne 1 ] && usage
                query_saved_color "$1" ;;
            c|change)
                [ $# -ne 2 ] && usage
                change_color_temp "$1" "$2" ;;
            *)
                usage ;;
        esac
esac
