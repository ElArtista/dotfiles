#====================================================================
# Backend
#====================================================================
# Backend to use: "xrender" or "glx".
# GLX backend is typically much faster but depends on a sane driver.
backend = "glx";

#====================================================================
# GLX backend
#====================================================================
# GLX backend: Avoid using stencil buffer. Might cause issues when
# rendering transparent content. My tests show a 15% performance boost.
glx-no-stencil = true;

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes,
# but is known to break things on some drivers (LLVMpipe, xf86-video-intel, etc.).
# Recommended if it works.
glx-no-rebind-pixmap = true;

# GLX backend: GLX buffer swap method we assume.
# Could be undefined (0), copy (1), exchange (2), 3-6, or buffer-age (-1).
# undefined is the slowest and the safest, and the default value.
# copy is fastest, but may fail on some drivers,
# 2-6 are gradually slower but safer (6 is still faster than 0).
# Usually, double buffer means 2, triple buffer means 3.
# buffer-age means auto-detect using GLX_EXT_buffer_age, supported by some drivers.
# Useless with –glx-use-copysubbuffermesa.
# Partially breaks –resize-damage.
# Defaults to undefined.
glx-swap-method = 1;

# Use the damage information to limit rendering to parts of the screen
# that has actually changed. Potentially improves the performance.
use-damage = true;

# Use X Sync fence to sync clients' draw calls.
# Needed on nvidia-drivers with GLX backend for some users.
xrender-sync-fence = true;

#====================================================================
# Shadows
#====================================================================
# Enabled client-side shadows on windows.
shadow = true;
# The blur radius for shadows, in pixels. (defaults to 12)
shadow-radius = 5;
# The opacity of shadows. (0.0 - 1.0, defaults to 0.75)
shadow-opacity = 0.5;
# The left offset for shadows, in pixels. (defaults to -15)
shadow-offset-x = -5;
# The top offset for shadows, in pixels. (defaults to -15)
shadow-offset-y = -5;
# The shadow exclude options are helpful if you have shadows enabled.
# Due to the way picom draws its shadows, certain applications will have visual glitches
# (most applications are fine, only apps that do weird things with xshapes or argb are affected).
# This list includes all the affected apps I found in my testing.
# The "! name~="" part excludes shadows on any "Unknown" windows,
# this prevents a visual glitch with the XFWM alt tab switcher.
shadow-exclude = [
    "name = 'Notification'",
    "class_g = 'Conky'",
    "class_g ?= 'Notify-osd'",
    "class_g = 'Cairo-clock'",
    "class_g = 'stalonetray'",
    "_GTK_FRAME_EXTENTS@:c",
    "bounding_shaped",
];

#====================================================================
# Opacity
#====================================================================
# Default opacity for active windows.
active-opacity = 1;
# Opacity of inactive windows.
inactive-opacity = 0.8;
# Opacity of window titlebars and borders.
frame-opacity = 1;
# Inactive opacity overrides the windows' _NET_WM_OPACITY values.
inactive-opacity-override = false;

# Dim inactive windows.
#inactive-dim = 0.2;
# Use fixed inactive dim value, instead of adjusting according to window opacity.
#inactive-dim-fixed = true;

# Blur background of semi-transparent / ARGB windows.
# Bad in performance, with driver-dependent behavior.
blur-background = true;
# Blur background of windows when the window frame is not opaque.
blur-background-frame = false;
# Use fixed blur strength rather than adjusting according to window opacity.
blur-background-fixed = false;
# Specify the blur convolution kernel
blur-kern = "3x3box"
# Exclude conditions for background blur.
blur-background-exclude = [
    "window_type = 'dock'",
    "window_type = 'desktop'",
    "class_g = 'slop'",
    "_GTK_FRAME_EXTENTS@:c"
];

#====================================================================
# Fading
#====================================================================
# Fade windows in/out when opening/closing and when opacity changes.
fading = true;
# The time between steps in fade step, in milliseconds. (> 0, defaults to 10)
fade-delta = 4;
# Opacity change between steps while fading in. (0.01 - 1.0, defaults to 0.028)
fade-in-step = 0.03;
# Opacity change between steps while fading out. (0.01 - 1.0, defaults to 0.03)
fade-out-step = 0.03;
# Do not fade destroyed ARGB windows with WM frame.
# Workaround of bugs in Openbox, Fluxbox, etc.
#no-fading-destroyed-argb = true;

#====================================================================
# Other
#====================================================================
# Try to detect WM windows and mark them as active.
mark-wmwin-focused = true;
# Mark all non-WM but override-redirect windows active (e.g. menus).
mark-ovredir-focused = true;
# Use EWMH _NET_WM_ACTIVE_WINDOW to determine which window is focused instead of using FocusIn/Out events.
# Usually more reliable but depends on a EWMH-compliant WM.
use-ewmh-active-win = true;
# Detect rounded corners and treat them as rectangular when –shadow-ignore-shaped is on.
detect-rounded-corners = true;
# Detect _NET_WM_OPACITY on client windows, useful for window managers not passing _NET_WM_OPACITY of client windows to frame windows.
# This prevents opacity being ignored for some apps.
# For example without this enabled my xfce4-notifyd is 100% opacity no matter what.
detect-client-opacity = true;

# Specify refresh rate of the screen.
# If not specified or 0, picom will try detecting this with X RandR extension.
refresh-rate = 0;
# Enable VSync.
vsync = true;

# Enable DBE painting mode, intended to use with VSync to (hopefully) eliminate tearing.
# Reported to have no effect, though.
dbe = false;

# Limit picom to repaint at most once every 1 / refresh_rate second to boost performance.
# This should not be used with --vsync drm/opengl/opengl-oml as they essentially does
# --sw-opti's job already, unless you wish to specify a lower refresh rate than the actual value.
#sw-opti = false;

# Unredirect all windows if a full-screen opaque window is detected, to maximize performance for full-screen windows.
# Known to cause flickering when redirecting/unredirecting windows. Flag --paint-on-overlay may make the flickering less obvious.
unredir-if-possible = true;

# Use WM_TRANSIENT_FOR to group windows, and consider windows in the same group focused at the same time.
detect-transient = true;

# Use WM_CLIENT_LEADER to group windows, and consider windows in the same group focused at the same time.
# WM_TRANSIENT_FOR has higher priority if –detect-transient is enabled, too.
detect-client-leader = true;

# Resize damaged region by a specific number of pixels.
# A positive value enlarges it while a negative one shrinks it.
# If the value is positive, those additional pixels will not be
# actually painted to screen, only used in blur calculation, and such.
# (Due to technical limitations, with --use-damage, those pixels will
# still be incorrectly painted to screen.) Primarily used to fix the
# line corruption issues of blur, in which case you should use the
# blur radius value here (e.g. with a 3x3 kernel, you should use
# --resize-damage 1, with a 5x5 one you use --resize-damage 2, and so on).
# May or may not work with --glx-no-stencil.
# Shrinking doesn’t function correctly.
#resize-damage = 1;

#====================================================================
# Window type settings
#====================================================================
wintypes:
{
    tooltip =
    {
        # fade: Fade the particular type of windows.
        fade = true;
        # shadow: Give those windows shadow
        shadow = false;
        # opacity: Default opacity for the type of windows.
        opacity = 0.85;
        # focus: Whether to always consider windows of this type focused.
        focus = true;
    };
    dock =
    {
        # no-dock-shadow = false
        shadow = true;
    };
    dnd =
    {
        # no-dnd-shadow
        shadow = false;
    };
};
